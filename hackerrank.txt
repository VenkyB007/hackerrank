package main

import (
    "bufio"
    "fmt"
    "io"
    "os"
    "strconv"
    "strings"
    "time"
)



/*
 * Complete the 'BurstyRateLimiter' function below.
 *
 * The function accepts following parameters:
 *  1. chan bool requestChan
 *  2. chan int resultChan
 *  3. int batchSize
 *  4. int toAdd
 */

func BurstyRateLimiter(requestChan chan bool, resultChan chan int, batchSize int, toAdd int) {
    
    
    request := <- requestChan
    val := 0
   
        
    for i:=0;i<batchSize;i++{
            if request{
            resultChan <- val
            }
        val = val+toAdd
    }
    time.Sleep(time.Millisecond*10)
    
    
}

func main() {
    reader := bufio.NewReaderSize(os.Stdin, 16 * 1024 * 1024)

    skipTemp, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)
    checkError(err)
    skipBatches := int(skipTemp)

    totalTemp, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)
    checkError(err)
    printBatches := int(totalTemp)

    batchSizeTemp, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)
    checkError(err)
    batchSize := int(batchSizeTemp)

    toAddTemp, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)
    checkError(err)
    toAdd := int(toAddTemp)

    resultChan := make(chan int)
    requestChan := make(chan bool)
    go BurstyRateLimiter(requestChan, resultChan, batchSize, toAdd)
    for i := 0; i < skipBatches + printBatches; i++ {
        start := time.Now().UnixNano()
        requestChan <- true
        for j := 0; j < batchSize; i++ {
            new := <-resultChan
            if i < skipBatches {
                continue
            }
            fmt.Println(new)
        }
        if i >= skipBatches && i != skipBatches + printBatches - 1 {fmt.Println("-----")}
        end := time.Now().UnixNano()
        timeDiff := (end - start)/1000000
        if timeDiff < 3 {
            fmt.Println("Rate is too high")
            break
        }
    }
}

func readLine(reader *bufio.Reader) string {
    str, _, err := reader.ReadLine()
    if err == io.EOF {
        return ""
    }

    return strings.TrimRight(string(str), "\r\n")
}

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}





--------------------------------------------------------------------------------------

package main

import (
    "bufio"
    "fmt"
    "io"
    "net"
    "os"
    "strconv"
    "strings"
)



/*
 * Complete the 'TCPServer' function below.
 *
 * The function accepts chan bool ready as a parameter.
 */

func TCPServer(ready chan bool) {
    
}

const maxBufferSize = 1024
const address = "127.0.0.1:3333"

func main() {
    stdout, err := os.Create(os.Getenv("OUTPUT_PATH"))
    checkError(err)

    defer stdout.Close()
    
    reader := bufio.NewReaderSize(os.Stdin, 16 * 1024 * 1024)
    writer := bufio.NewWriterSize(stdout, 16 * 1024 * 1024)

    messagesCount, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)
    checkError(err)

    var messages []string

    for i := 0; i < int(messagesCount); i++ {
        messagesItem := readLine(reader)
        messages = append(messages, messagesItem)
    }

    ready := make(chan bool)
    go TCPServer(ready)
    <- ready
    reversed, err := tcpClient(messages)
    if err != nil {
        panic(err)
    }
    for _, msg := range reversed {
        fmt.Fprintf(writer, "%s\n", msg)
    }
    writer.Flush()
}

func readLine(reader *bufio.Reader) string {
    str, _, err := reader.ReadLine()
    if err == io.EOF {
        return ""
    }

    return strings.TrimRight(string(str), "\r\n")
}

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}

func tcpClient(messages []string) ([]string, error) {
    tcpAddr, err := net.ResolveTCPAddr("tcp", address)
    if err != nil {
        return []string{}, err
    }

    reversed := []string{}

    for _, msg := range messages {

        conn, err := net.DialTCP("tcp", nil, tcpAddr)
        if err != nil {
            return []string{}, err
        }
        _, err = conn.Write([]byte(msg))
        if err != nil {
            return []string{}, err
        }

        reply := make([]byte, maxBufferSize)

        n, err := conn.Read(reply)
        if err != nil {
            return []string{}, err
        }

        reversed = append(reversed, string(reply[:n]))
        conn.Close()
    }

    return reversed, nil
}

-------------------------------------------------------------------------------------------

package main

import (
    "bufio"
    "fmt"
    "io"
    "os"
    "strconv"
    "strings"
)



/*
 * Complete the 'customSorting' function below.
 *
 * The function is expected to return a STRING_ARRAY.
 * The function accepts STRING_ARRAY strArr as parameter.
 */

func customSorting(strArr []string) []string {

}

func main() {
    reader := bufio.NewReaderSize(os.Stdin, 16 * 1024 * 1024)

    stdout, err := os.Create(os.Getenv("OUTPUT_PATH"))
    checkError(err)

    defer stdout.Close()

    writer := bufio.NewWriterSize(stdout, 16 * 1024 * 1024)

    strArrCount, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)
    checkError(err)

    var strArr []string

    for i := 0; i < int(strArrCount); i++ {
        strArrItem := readLine(reader)
        strArr = append(strArr, strArrItem)
    }

    result := customSorting(strArr)

    for i, resultItem := range result {
        fmt.Fprintf(writer, "%s", resultItem)

        if i != len(result) - 1 {
            fmt.Fprintf(writer, "\n")
        }
    }

    fmt.Fprintf(writer, "\n")

    writer.Flush()
}

func readLine(reader *bufio.Reader) string {
    str, _, err := reader.ReadLine()
    if err == io.EOF {
        return ""
    }

    return strings.TrimRight(string(str), "\r\n")
}

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}

